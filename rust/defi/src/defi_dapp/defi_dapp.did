type CancelOrderErr = variant { NotAllowed; NotExistingOrder };
type CancelOrderReceipt = variant { Ok : nat64; Err : CancelOrderErr };
type DepositErr = variant { TransferFailure; BalanceLow };
type DepositReceipt = variant { Ok : nat; Err : DepositErr };
type Order = record {
  id : nat64;
  from_amount : nat;
  from_token_canister_id : principal;
  owner : principal;
  to_amount : nat;
  to_token_canister_id : principal;
};
type OrderPlacementErr = variant { InvalidOrder; OrderBookFull };
type OrderPlacementReceipt = variant { Ok : Order; Err : OrderPlacementErr };
type WithdrawErr = variant { TransferFailure; BalanceLow };
type WithdrawReceipt = variant { Ok : nat; Err : WithdrawErr };
service : {
  balance : (principal) -> (nat) query;
  cancel_order : (nat64) -> (Result);
  check_order : (nat64) -> (opt Order) query;
  deposit : (principal) -> (DepositReceipt);
  deposit_address : () -> (text) query;
  list_order : () -> (vec Order) query;
  place_order : (principal, nat, principal, nat) -> (OrderPlacementReceipt);
  symbol : (principal) -> (text);
  whoami : () -> (principal) query;
  withdraw : (principal, nat) -> (WithdrawReceipt);
}
