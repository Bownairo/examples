type Token = principal;
type CancelOrderErr = variant { NotAllowed; NotExistingOrder };
type CancelOrderReceipt = variant { Ok : nat64; Err : CancelOrderErr };
type DepositErr = variant { TransferFailure; BalanceLow };
type DepositReceipt = variant { Ok : nat; Err : DepositErr };
type OrderPlacementErr = variant { InvalidOrder; OrderBookFull };
type OrderPlacementReceipt = variant { Ok : opt Order; Err : OrderPlacementErr };
type WithdrawErr = variant { TransferFailure; BalanceLow };
type WithdrawReceipt = variant { Ok : nat; Err : WithdrawErr };
type OrderId = nat32;
type Order = record {
  id : OrderId;
  owner : principal;
  from : principal;
  fromAmount : nat;
  to : principal;
  toAmount : nat;
};
type Balance = record {
  owner: principal;
  token: Token;
  amount: nat;
};
service : {
  getBalance: (Token) -> (nat) query;
  getBalances: () -> (vec Balance) query;
  getAllBalances: () -> (vec Balance) query;
  cancelOrder: (OrderId) -> (CancelOrderReceipt);
  getOrder: (OrderId) -> (opt Order);
  getOrders: () -> (vec Order) query;
  deposit: (Token) -> (DepositReceipt);
  getDepositAddress: () -> (blob);
  getWithdrawalAddress: () -> (blob);
  placeOrder: (Token, nat, Token, nat) -> (OrderPlacementReceipt);
  getSymbol: (Token) -> (text);
  whoami: () -> (principal) query;
  withdraw: (Token, nat) -> (WithdrawReceipt);
  credit: (principal, Token, nat) -> ();
  clear: () -> ();
}
