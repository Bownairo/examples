type WithdrawReceipt = 
 variant {
   Err: variant {
          BalanceLow;
          TransferFailure;
        };
   Ok: nat;
 };
type Token = principal;
type Time = int;
type Symbol = text;
type OrderPlacementReceipt = 
 variant {
   Err: variant {
          InvalidOrder;
          OrderBookFull;
        };
   Ok: Order;
 };
type OrderId = nat32;
type Order = 
 record {
   dip_symbol: Symbol;
   from: Token;
   fromAmount: nat;
   id: OrderId;
   owner: principal;
   price: float64;
   submitted: Time;
   to: Token;
   toAmount: nat;
 };
type DepositReceipt = 
 variant {
   Err: variant {
          BalanceLow;
          TransferFailure;
        };
   Ok: nat;
 };
type CancelOrderReceipt = 
 variant {
   Err: variant {
          InternalError;
          NotAllowed;
          NotExistingOrder;
        };
   Ok: OrderId;
 };
service : {
  cancelOrder: (OrderId) -> (CancelOrderReceipt);
  deposit: (Token) -> (DepositReceipt);
  depositAddress: () -> (blob);
  getBalance: (Token) -> (nat) query;
  getOrder: (OrderId) -> (opt Order);
  listOrders: () -> (vec Order) query;
  placeOrder: (Token, nat, Token, nat) -> (OrderPlacementReceipt);
  symbol: (Token) -> (text);
  whoami: () -> (principal) query;
  withdraw: (Token, nat) -> (WithdrawReceipt);
}
