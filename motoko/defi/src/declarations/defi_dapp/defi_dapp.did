type WithdrawError = 
 variant {
   balanceLow;
   transferFailure;
 };
type Token = principal;
type Result = 
 variant {
   err: WithdrawError;
   ok: nat64;
 };
type OrderPlacementResponse = 
 record {
   order: Order;
   status: text;
 };
type OrderId = nat32;
type Order = 
 record {
   from: Token;
   fromAmount: nat;
   id: OrderId;
   owner: principal;
   to: Token;
   toAmount: nat;
 };
type CancelOrderResponse = 
 record {
   order_id: OrderId;
   status: text;
 };
service : {
  balance: (Token) -> (nat64) query;
  cancel_order: (OrderId) -> (CancelOrderResponse);
  check_order: (OrderId) -> (opt Order);
  deposit_address: () -> (blob);
  deposit_dip: (Token) -> (opt text);
  deposit_icp: () -> (opt text);
  list_order: () -> (vec Order) query;
  place_order: (Token, nat, Token, nat) -> (OrderPlacementResponse);
  whoami: () -> (principal) query;
  withdraw_dip: (Token, nat64) -> (Result);
  withdraw_icp: (nat64) -> (Result);
}
